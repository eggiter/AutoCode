package ${groupId}.${artifactId}.web;

import ${groupId}.${artifactId}.bean.${tableNameUpperCase};
import ${groupId}.${artifactId}.common.Page;
import ${groupId}.${artifactId}.common.Response;
import ${groupId}.${artifactId}.service.${tableNameUpperCase}Service;
import ${groupId}.${artifactId}.service.base.BaseService;
import ${groupId}.${artifactId}.web.base.BaseController;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;

/**
 * Controller
 * @author ${author}
 */
@Controller
@RequestMapping("/${tableNameLowerCase}")
public class ${tableNameUpperCase}Controller extends BaseController<${tableNameUpperCase}, Long> {

    private static Logger logger = LoggerFactory.getLogger(${tableNameUpperCase}Controller.class);

    @Autowired
    private ${tableNameUpperCase}Service ${tableNameLowerCase}Service;

    @Override
    protected BaseService<${tableNameUpperCase}, Long> getService() {
        return this.${tableNameLowerCase}Service;
    }

    @RequestMapping("/save")
    @ResponseBody
    public Response<Integer> save(@RequestBody ${tableNameUpperCase} ${tableNameLowerCase}){
        logger.info("save: " + JSON.toJSONString(${tableNameLowerCase}));
        Response<Integer> response;
        try {
            response = new Response<Integer>(baseSave(${tableNameLowerCase}));
        } catch (Exception e){
            logger.error(e.getMessage());
            e.printStackTrace();
            response = new Response<Integer>(e.getMessage());
        }
        return response;
    }

    @RequestMapping("/{id}/delete")
    @ResponseBody
    public Response<Integer> delete(@PathVariable Long id){
        Response<Integer> response;
        try {
            response = new Response<Integer>(baseDelete(id));
        } catch (Exception e){
            logger.error(e.getMessage());
            e.printStackTrace();
            response = new Response<Integer>(e.getMessage());
        }
        return response;
    }

    @RequestMapping("/${tableNameLowerCase}s")
    @ResponseBody
    public Response<Page<${tableNameUpperCase}>> list (HttpServletRequest request){
        ${tableNameUpperCase} ${tableNameLowerCase} = JSON.parseObject(request.getParameter("${tableNameLowerCase}"), ${tableNameUpperCase}.class);
        Page<${tableNameUpperCase}> page = JSON.parseObject(request.getParameter("page"), new TypeReference<Page<${tableNameUpperCase}>>(){});
        Response<Page<${tableNameUpperCase}>> response;
        try {
            response = new Response<Page<${tableNameUpperCase}>>(baseList(${tableNameLowerCase}, page));
        } catch (Exception e) {
            logger.error(e.getMessage());
            e.printStackTrace();
            response = new Response<Page<${tableNameUpperCase}>>(e.getMessage());
        }
        return response;
    }

    @RequestMapping("/{id}/detail")
    @ResponseBody
    public Response<${tableNameUpperCase}> detail(@PathVariable Long id){
        Response<${tableNameUpperCase}> response;
        try {
            response = new Response<${tableNameUpperCase}>(baseView(id));
        } catch (Exception e){
            logger.error(e.getMessage());
            e.printStackTrace();
            response = new Response<${tableNameUpperCase}>(e.getMessage());
        }
        return response;
    }

    // ${customizedCodeAreaStart}
$!{userTypedCode}
    // ${customizedCodeAreaEnd}
}